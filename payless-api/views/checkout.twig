<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
        }

        form {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        form label, form input {
            display: block;
            width: fit-content;
            margin-bottom: 10px;
        }

        form input {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        form button {
            display: block;
            width: 50%;
            margin: 10px auto;
            padding: 10px;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        form button#checkout-btn {
            background-color: #4CAF50;
        }

        form button#checkout-btn:hover {
            background-color: #45a049;
        }

        form button#cancel-btn {
            background-color: #af4c4c;
        }

        form button#cancel-btn:hover {
            background-color: #a04545;
        }

        button[disabled] {
            opacity: 0.5;
        }

        .errors {
            padding: 8px 24px;
            color: rgb(214 62 62);
        }
    </style>
</head>
<body>
<form action=".">
    <label for="cardholder_name">Card holder's name</label>
    <input type="text" id="cardholder_name" name="cardholder_name" placeholder="John Doe" required>
    <ul class="errors" id="cardholder_name_errors"></ul>

    <label for="card_number">Card number</label>
    <input type="text" id="card_number" name="card_number" placeholder="1234 5678 9012 3456" required>
    <ul class="errors" id="card_number_errors"></ul>

    <label for="expiration_date">Expiration date</label>
    <input type="text" id="expiration_date" name="expiration_date" placeholder="MM/AAAA" required>
    <ul class="errors" id="expiration_date_errors"></ul>

    <label for="cvv">CVV</label>
    <input type="text" id="cvv" name="cvv" placeholder="123" required>
    <ul class="errors" id="cvv_errors"></ul>

    <ul class="errors" id="global_errors"></ul>
    <button type="submit" id="checkout-btn">Checkout</button>
    <button type="button" id="cancel-btn">Cancel</button>
</form>
</body>
</html>

<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function (){
    const disableButtons = () => {
        document.querySelector('#checkout-btn').setAttribute('disabled', 'disabled');
        document.querySelector('#cancel-btn').setAttribute('disabled', 'disabled');
    };
    const enableButtons = () => {
        document.querySelector('#checkout-btn').removeAttribute('disabled');
        document.querySelector('#cancel-btn').removeAttribute('disabled');
    };
    const handleError = (data = null) => {
        if (data) {
            const globalErrors = document.querySelector('#global_errors');
            if (typeof data === 'string') {
                globalErrors.innerHTML = `<li>${data}</li>`;
            } else {
                let errorsWithoutFields = [];
                for (const [field, errors] of Object.entries(data)) {
                    if (errors.length > 0) {
                        const fieldErrors = document.querySelector(`#${field}_errors`);
                        if (fieldErrors) {
                            fieldErrors.innerHTML = errors.map(error => `<li>${error}</li>`).join('\n');
                        } else {
                            errorsWithoutFields = [...errorsWithoutFields, errors];
                        }
                    }
                }
                if (errorsWithoutFields.length > 0) {
                    globalErrors.innerHTML = errorsWithoutFields.map(error => `<li>${error}</li>`).join('\n');
                }
            }
        }
        enableButtons();
    };
    const clearErrors = () => {
        const fields = ['global', 'cardholder_name', 'card_number', 'expiration_date', 'cvv'];
        for (const field of fields) {
            const fieldErrors = document.querySelector(`#${field}_errors`);
            if (fieldErrors) {
                fieldErrors.innerHTML = '';
            }
        }
    };

    // VALIDATORS
    document.querySelectorAll('input').forEach(input => {
        input.addEventListener('focusout', (event) => {
            const errorEl = document.querySelector(`#${input.id}_errors`);

            if (!errorEl) {
                return;
            }

            errorEl.innerHTML = '';

            switch (input.id) {
                case 'cardholder_name':
                    if (!input.value || input.value.trim() === '') {
                        errorEl.innerHTML = '<li>Card holder\'s name is mandatory</li>';
                    }
                    break;
                case 'card_number':
                    if (!input.value || !input.value.replaceAll(' ', '').match(/^[0-9]{16}$/)) {
                        errorEl.innerHTML = '<li>Card number is invalid</li>';
                    }
                    break;
                case 'expiration_date':
                    if (!input.value || input.value.trim() === '' || !input.value.match(/^[0-9]{2}\/[0-9]{4}$/)) {
                        errorEl.innerHTML = '<li>Expiration date is invalid</li>';
                    } else {
                        const [month, year] = input.value.split('/');
                        const now = new Date();
                        const currentDateFormatted = (now.getMonth() + 1).toString().padStart(2, '0') + '/' + now.getFullYear();
                        if (new Date(year, parseInt(month) - 1) < now && input.value !== currentDateFormatted) {
                            errorEl.innerHTML = '<li>Card is expired</li>';
                        }
                    }
                    break;
                case 'cvv':
                    if (!input.value || input.value.trim() === '' || !input.value.match(/^[0-9]{3}$/)) {
                        errorEl.innerHTML = '<li>CVV is invalid</li>';
                    }
                    break;
            }
        });
    });

    // CANCEL CHECKOUT
    document.querySelector('#cancel-btn').addEventListener('click', () => {
        disableButtons();
        clearErrors();

        fetch("{{ cancel_url }}", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
        })
            .then(response => {
                if (response.status === 200) {
                    window.location.href = "{{ canceled_url }}";
                } else {
                    return response.json().then(data => {
                        handleError(data);
                    });
                }
            })
            .catch(error => {
                console.error(error);
                enableButtons();
            });
    });

    // SUBMIT CHECKOUT
    document.querySelector('form').addEventListener('submit', (event) => {
        event.preventDefault();
        clearErrors();
        disableButtons();

        const cardholderName = document.querySelector('#cardholder_name').value;
        const cardNumber = document.querySelector('#card_number').value;
        const expirationDate = document.querySelector('#expiration_date').value;
        const cvv = document.querySelector('#cvv').value;

        fetch("{{ validate_url }}", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                cardholder_name: cardholderName,
                card_number: cardNumber,
                expiration_date: expirationDate,
                cvv: cvv
            })
        })
            .then(response => {
                if (response.status === 200) {
                    window.location.href = "{{ confirmation_url }}";
                } else {
                    return response.json().then(data => {
                        handleError(data);
                    });
                }
            })
            .catch(error => {
                console.error(error);
                enableButtons();
            });
    });
});
</script>